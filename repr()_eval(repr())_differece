#The difference between c = repr(a) and d = eval(repr(a))
#copy & deep copy
"""

The expression `c = repr(a)` is used to obtain a string representation of the object `a` using the `repr()` function. 
Explanation: 
- The `repr()` function returns a string that represents a printable version of the object `a`. 
- The string representation generated by `repr()` is typically a valid Python expression that can be used to recreate the object. 
- The string representation includes information about the type and value of the object. 
By assigning `c = repr(a)`, you store the string representation of `a` in the variable `c`. 
This can be useful for various purposes, such as debugging or serialization. 
Note: The string representation obtained using `repr()` is not always the same as the original source code used to create the object. 
It is a representation that aims to provide a useful and unambiguous description of the object.
"""
"""
The expression `d = eval(repr(a))` is used to create a deep copy of an object `a` using the `eval()` and `repr()` functions. Explanation: 
- The `repr()` function returns a string representation of the object `a`. 
- The `eval()` function evaluates the string representation as a Python expression and creates a new object `d` with the same value as `a`. 
- The `eval()` function essentially recreates the object based on its string representation. 
By using `eval(repr(a))`, you can create a new object `d` that is a separate copy of `a`, but with the same value. 
This can be useful when you want to create a copy of an object without referencing the original object. 
Note: It's important to be cautious when using `eval()` as it can execute arbitrary code. 
Make sure to only use it with trusted input. 
"""
