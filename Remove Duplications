#case 1 - by using set()/ Merit: fast/ Demerit:disorder / strings + numbers
lst1 = ['we','she','he','i','him','he']
lst2 = list(set(lst1))
print(lst2)            #DISORDER ['i', 'he', 'we', 'she', 'him'] 

# further thinking
lst2.sort(key=lst1.index)    #lst2.sort时候没有返回值，所以我们不能将sort赋值给某个变量，否则就会报错
print(lst2)               # 按照列表a的顺序排列 ['we', 'she', 'he', 'i', 'him']


#case 2- by using {}.fromkeys(lst).keys() / demeit: disorder / strings + numbers
lst1 = [2, 1, 3, 4, 1]
lst2 = {}.fromkeys(lst1).keys()
print(lst2)   #dict_keys([2, 1, 3, 4])

'''
{}.fromkeys(a).keys()
- creates a new dictionary with keys from the iterable `a`, and then retrieves the keys of that dictionary as a view object.
- Note that the order of the keys in the view object may not be the same as the order in the original iterable `a`, 
as dictionaries do not guarantee a specific order for their keys.
- If you want to get the keys as a list, you can use the `list()` function to convert the view object to a list:
'''

#case 3  --- 2 expressions
#trial 1
b=[]
a = ['w','n','y','w']
for i in a:
    if i not in b:                                # can not use a.count == 1, otherwise 'w' will be not shown
        b.append(i)
print(b)

#comparison
d=['a','b','c','a']
[item for item in d if d.count(item) == 1]     
print(item)                                       # only a left


r=[]
for i in d:
    if d.count(i) == 1:
        r.append(i)
print(r)                                        #demerit:remove a, as a is duplicated in d

# same as abv mentioned expresse
data = [2, 1, 3, 4, 1]
list(filter(lambda x:data.count(x) == 1, data))   # demerit: remove 1, result shows  [2, 3, 4]

#trial 2
a = ['we','ne','ye','we']
b=[]
b = [i for i in a if i not in b]                # incorrect ['we', 'ne', 'ye', 'we']
print(b)
     
d=[]
d=[d.append(i) for i in a if not i in d]        #incorrect [None, None, None]
print(d)
   
e=[]
[e.append(i) for i in a if not i in e]          # ['we', 'ne', 'ye']
print(e)
 
c = [item for i, item in enumerate(a) if item not in a[:i]]
print(c)                                        # ['we', 'ne', 'ye']
