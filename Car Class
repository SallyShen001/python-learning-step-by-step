class Car:
    def __init__(self,make,model,year):
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0 
#odometer_reading 属性无需经过形参设定，可在初始方法中指定默认值
    def get_descriptive_name(self):
        long_name = f"{self.make} {self.model} {self.year}"
        return long_name.title()
    def read_odometer(self):
        print(f"This car has {self.odometer_reading} miles on it")  
    def update_odometer(self,mileage):
        if mileage >= self.odometer_reading: #check whether update odometer is reasonable
          self.odometer_reading = mileage     
#接受里程值，并将其赋给self.odometer_reading
        else:
          print("You can't roll back an odometer!")
    def increment_odometer(self,miles):
        self.odometer_reading += miles
#酱里程表读书增加指定的量

    
my_new_car = Car("audi","a4",2019)
print(my_new_car.get_descriptive_name())  # Audi A4 2019
my_new_car.read_odometer()                #This car has 0 miles on it

# amend value of attribution by passing thr reference
my_new_car.odometer_reading = 23
my_new_car.read_odometer()                 #This car has 23 miles on it

# amend value of attribution by passing thr method
my_new_car.update_odometer(25)
my_new_car.read_odometer()                 #This car has 25 miles on it

my_new_car.increment_odometer(100)         #This car has 125 miles on it
my_new_car.read_odometer()
