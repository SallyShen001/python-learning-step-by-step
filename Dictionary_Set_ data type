# Dictionaries
band = {
    "vocals": "Plant",
    "guitar": "Page"
}
band2 = dict(vocals='Plant', guitar="Page")

print(type(band))  # <class 'dict'>
print(len(band))  # 2

# Access items
print(band["vocals"])      # dict[key]
print(band.get("guitar"))  # .get()

# list all keys
print(band.keys())         # dict_keys(['vocals', 'guitar'])

# list all values
print(band.values())       # dict_values(['Plant', 'Page'])

# list of key/value pairs as tuples
print(band.items())       # dict_items([('vocals', 'Plant'), ('guitar', 'Page')])

# verify a key exists
print("guitar" in band)  # True
print("triangle" in band)  # False

# change values
band["vocals"] = "Coverdale"
band.update({"bass": "JPJ"})
print(band)       # {'vocals': 'Coverdale', 'guitar': 'Page', 'bass': 'JPJ'}

# remove items
print(band.pop("bass"))
print(band)

band["drums"] = 'Bonham'
print(band)  # {'vocals': 'Coverdale', 'guitar': 'Page', 'drums': 'Bonham'}

print(band.popitem()) # return tuple  ('drums', 'Bonham')
print(band)  # {'vocals': 'Coverdale', 'guitar': 'Page'}

# delete and clear
band["drums"] = 'Bonham' # 先加进去 再删除
del band['drums']
print(band) {'vocals': 'Coverdale', 'guitar': 'Page'}

band2.clear()
print(band2) # {} 返回空集合

del band2

# copy dictionaries
band2 = band #create a reference, once copyset is changed, it will reflect the original dictionary
print("Bad copy!")
print(band2) 
print(band) 

# band2["drums"] = 'Dave'
# print(band)

band2 = band.copy()
band2["drums"] = 'Dave'
print("Good copy!")
print(band) 
print(band2)

# or use the dict() constructor fuction
band3 = dict(band)
print("Good copy!")
print(band3)

# Nested dictionaries

member1 = {
    "name": "Plant",
    "instrument": "vocals"
}
member2 = {
    "name": "Page",
    "instrument": "guitar"
}
band = {
    "member1": member1,
    "member2": member2
}
print(band)
# {'member1': {'name': 'Plant', 'instrument': 'vocals'}, 'member2': {'name': 'Page', 'instrument': 'guitar'}}
print(band["member1"]["name"]) # Plant


# Sets
nums = {1, 2, 3, 4}
nums2 = set((1,2,3,4))

print(nums)  # {1, 2, 3, 4}
print(nums2)  # {1, 2, 3, 4}
print(type(nums)) # <class 'set'>
print(len(nums))  # 4

# No duplicate allowed
nums = {1, 2, 2, 3}
print(nums) 

# True is a dupe of 1, False is a dupe of zero
nums = {1, True, 2, False, 3, 4, 0} # remove True and 0 because they are duplicates
print(nums)  # {False, 1, 2, 3, 4}

# check if a value is in a set
print(2 in nums) # True

# but you cannot refer to an element in the set with an index position or a key

# add a new element to a set
nums.add(8) # {False, 1, 2, 3, 4, 8}
print(nums)

# add elements from one set to another
morenums = {5,6,7}
nums.update(morenums)
print(nums) # {False, 1, 2, 3, 4, 5, 6, 7, 8}

# you can use update with lists, tuples, and dictionaries, too

# merge two sets to create a new set
one = {1, 2, 3}
two = {5, 6, 7}

mynewset = one.union(two)  # .union() function
print(mynewset) # {1, 2, 3, 5, 6, 7}

# keep only the duplicates
one = {1, 2, 3}
two = {2, 3, 4}
one.intersection_update(two) # intersection_update()
print(one)  # {2, 3}

# keep everything except the duplicates()
one = {1, 2, 3}
two = {2, 3, 4}
one.symmetric_difference_update(two) # symmetric_difference_update()
print(one)  # {1, 4}
