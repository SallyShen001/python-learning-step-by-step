'''
Tic-Tac-Toe Game 
You are tasked with completing a text-based Tic-Tac-Toe game in Python. The game already has some structure and functionality, but there are parts missing that you need to implement. Here's a description of what needs to be done:
1.	Print the Board (print_board function): The print_board function should display the current state of the Tic-Tac-Toe board. It has been partially implemented, but you need to fill in the code to correctly display the board with "X" and "O" symbols.
2.	Check for a Win (check_win function): The check_win function should determine if a player has won the game. It needs to check for winning conditions, such as three in a row horizontally, vertically, or diagonally. Implement the logic for checking these conditions and return True if a player has won; otherwise, return False.
3.	Check for a Draw (is_draw function): The is_draw function should check if the game has ended in a draw (a tie). It should return True if all cells on the board are filled with "X" and "O" symbols, and no player has won; otherwise, return False.
4.	Update the Board: Inside the main game loop, when a player makes a valid move, update the board with the player's symbol ("X" or "O") in the chosen row and column.
5.	Switch Players: Inside the main game loop, after a player has made a move, switch to the other player. If the current player is "X," switch to "O," and vice versa.
Your task is to complete the code by implementing these missing parts. Once the code is complete, it will allow two players to take turns playing Tic-Tac-Toe, display the current state of the board after each move, announce the winner or a draw when the game ends, and allow players to choose to play another round or exit the game.
Use the provided code with TODO comments to guide your implementation. Test your completed game to ensure it works as expected.
'''
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 19 16:04:34 2023

@author: ThinkPad
"""

def print_board(board):
# Display the state of the Tic-Tac-Toe board
    for row in board:
        print(" | ".join(row))
        print("-" * 9)    

def check_win(board, player):
# TO determine if a player has won the game.
# Implement the winning conditions
    count_player = 0
    for eachrow in board:
# Condition1:three in row, win        
        if eachrow.count(player) == 3: 
            return True 
        
        elif board[2][0] == board [1][1] == board[0][2] == player:
# Condition2: three in the secondary diagonal, win
            return True 
# Condition3: three in the diagonal, win       
        elif board[0][0] == board[1][1] == board[2][2] == player:
            return True
# Condition4: three in column, win 
        else:
            for col in range(3):
                if board[0][col]==board[1][col]==board[2][col] ==player:
                    return True

    else:
        pass


def is_draw(board):
# Implement the draw condition
    count_x = 0
    count_o = 0
    for eachrow in board:
        count_x += eachrow.count("X") # count number of "X" 
        count_o += eachrow.count("O") # count number of "O"
        
# If all cells on the board are filled, and no one won, return True      
    if count_o + count_x == 9: 
        return True
    else:                        # otherwise, return False
        return False

def play_tic_tac_toe():
# Creat the 3*3 placeholder to receive the input symbol "X" or "O"
    board = [[" " for _ in range(3)] for _ in range(3)]
    player = "X" # Player X first
    game_over = False

    print("\nWelcome to Tic-Tac-Toe!")

    while not game_over: 
        print_board(board) # Call the function print_board to display board
        try:
# Enter q to quit or enter row numbre to input
            row = (input(f"Player {player}, enter row (0, 1, 2) or q to quit: "))
            
            if row == 'q': # Once input q, print Goodbye, break the loop
                print("Thanks for playing Tic-Tac-Toe! Goodbye!")
                break
# Enter q to quit or enter column numbre to input           
            col = (input(f"Player {player}, enter column (0, 1, 2) or q to quit: "))
            if col == 'q': # Once input q, print Goodbye, break the loop
                print("Thanks for playing Tic-Tac-Toe! Goodbye!")
                break
            
            row = int(row) # convert variable row into string type
            col = int(col) # convert variable column into string type

# Check whether input of row&column number is reasonale, and the place is blank
            if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == " ":
# Update the board with the player's move
                board[row][col] = player

                
# Check for a win or draw and set game_over accordingly
                check_win(board, player) # Call the function check_win 
                if check_win(board, player): # If player wins,
# Display win state of the board by calling function print_board            
                    print_board(board)
                    print(f"You Win, {player}") # Print and break the loop
                    break
                
                is_draw(board) # Call the function is_draw
                if is_draw(board): # If it is draw
                    print_board(board) # display the board
                    print("The game is ended in a draw")   
                    break #break the loop, end the game
                
# Switch players (X -> O or O -> X)           
                if player == "X":
                    player = "O"
                    print(f"Switch to {player}")
                else:
                    player = "X"
                    print(f"Switch to {player}")

# Input row or column number is not right, print prompting                
            else:
                print("Invalid move. Try again.")
# Handle ValueError if any
        except ValueError:
            print("Invalid input. Enter a valid row and column (0, 1, 2).")

# After game over, ask player to make a choice, play again or end the game
    play_again = input("Play another round? (yes/no): ").lower()
    if play_again == "yes": # If yes, call the play_tic_toc_toe function again
        play_tic_tac_toe()
    else: # Else, close the game
        print("Thanks for playing Tic-Tac-Toe!")

# Example usage
play_tic_tac_toe()
