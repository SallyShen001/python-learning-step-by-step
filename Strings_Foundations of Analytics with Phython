#Case Page 12
print("{0:s}".format("I'm enjoying learning Python"))
print("{0:s}".format("This is \        
                     new part"))
#use a single backslash to split a long one-line string across multiple lines so that it’s easier to read and edit
#The whitespaces of the line shown in the result

print("{0:s}".format("This is \
new part")) 
#use triple single """ """ and double quotes " "to create multi-line strings and they print to the screen on separate lines

#case Page 14
string1 = "This is a "
string2 = "short string"
sentence = string1 + string2
print("{0:s}".format(sentence))
print("{0:s}  {1:s}{2:s}".format("She is","very"*4,"beautiful"))
print("{0:s}{1:s}{2:s}".format("She is","very","beautiful"))
m=len(sentence)
print("{0:d}".format(m))  

#case_Python and Data Mining
text = "Python"
print(text[0])                   # Output: 'P'
print(text[2])                   # Output: ‘t’

#case_Python and Data Mining
first_name = "John"
last_name = "Doe"
full_name = first_name + " " + last_name
print(full_name)                  # Output: "John Doe"

text = "   Python Programming   “
print(len(text))
print(text.upper())      # Output: "   PYTHON PROGRAMMING   "
print(text.strip())      # Output: "Python Programming"
print(text.replace(' ', '-'))  # Output: "---Python-Programming---"
print(text.startswith('Python'))  # Output: False
print(text.endswith('ming'))      # Output: True

"""
isalpha(): Checks if all characters are letters.
isdigit(): Checks if all characters are digits.
isspace(): Checks if all characters are whitespace.
count(substring): Counts occurrences of the given substring.
find(substring): Returns the index of the first occurrence of the substring.
"""
#String Slicing
sentence = "Python is a great programming language."
substring = sentence[7:19]      # Extracts "a great"

#String Escaping
quote = "She said, \"Hello!\""
new_line = "Line 1\nLine 2"

#The difference between c = repr(a) and d = eval(repr(a))
#copy & deep copy
"""

The expression `c = repr(a)` is used to obtain a string representation of the object `a` using the `repr()` function. 
Explanation: 
- The `repr()` function returns a string that represents a printable version of the object `a`. 
- The string representation generated by `repr()` is typically a valid Python expression that can be used to recreate the object. 
- The string representation includes information about the type and value of the object. 
By assigning `c = repr(a)`, you store the string representation of `a` in the variable `c`. 
This can be useful for various purposes, such as debugging or serialization. 
Note: The string representation obtained using `repr()` is not always the same as the original source code used to create the object. 
It is a representation that aims to provide a useful and unambiguous description of the object.
"""
"""
The expression `d = eval(repr(a))` is used to create a deep copy of an object `a` using the `eval()` and `repr()` functions. Explanation: 
- The `repr()` function returns a string representation of the object `a`. 
- The `eval()` function evaluates the string representation as a Python expression and creates a new object `d` with the same value as `a`. 
- The `eval()` function essentially recreates the object based on its string representation. 
By using `eval(repr(a))`, you can create a new object `d` that is a separate copy of `a`, but with the same value. 
This can be useful when you want to create a copy of an object without referencing the original object. 
Note: It's important to be cautious when using `eval()` as it can execute arbitrary code. 
Make sure to only use it with trusted input. 
"""
